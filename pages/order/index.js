import Head from 'next/head'
import { useEffect } from 'react'
import { useState, useContext } from 'react';
import styles from './order.module.css'
import Button from './button/button';
import Modal from '../../components/modal/modal';
import { ContextOrder } from './contextOrder';
import ButtonHist from './button/buttonRegister';
import ModalHistorico from '../../components/modalHistorico/modalHistorico';
export default function Home() {
  const [ids, setIds] = useState()
  const [estadoModal, setEstadoModal] = useState()
  const [dados, setDados] = useState()
  const [idsHist, setIdsHist] = useState()
  const [estadoHistory, setEstadoHistory] = useState()
  const [botoesCompras, setBotao] = useState([

    {idVinculo:2,estilo:'red',status:'aguardando'},
    {idVinculo:5,estilo:'red',status:'aguardando'},
    {idVinculo:3,estilo:'red',status:'aguardando'},
    {idVinculo:6,estilo:'red',status:'aguardando'},
    {idVinculo:1,estilo:'red',status:'aguardando'},
    {idVinculo:4,estilo:'red',status:'aguardando'}
  ])

 
  const propriedade2 = []
  const produtor2 = []
  const monitoramento2 = []
  const monitoramentoUp = []
  const vinculo2 = []
  const dadosMerge = []
  useEffect(()=>{

  },[botoesCompras])
  useEffect(() => {

    async function pegarJson() {
      const response = await fetch('/processo.json');
      const json = await response.json();
      setDados(json)
    }
    pegarJson()

  }, [])



  if (!dados) {
    return null
  }

  //=======================================================//=======================================
  const renderizaDados = Object.entries(dados)
  for (const key in dados) {

  }
  renderizaDados.map((el) => {

    el.map((ul, index, ar) => {

      if (typeof ul == 'object') {

        for (const key in ul) {

          if (ar[0] == 'monitoramentos') {

            monitoramento2.push(ul[key])

          }
          if (ar[0] == 'propriedades') {
            propriedade2.push(ul[key])
            dadosMerge.push(ul[key])
          }
          if (ul[key].idprodutor) {
            produtor2.push(ul[key])
            dadosMerge.push(ul[key])
          }
          if (ar[0] == 'vinculo') {

            vinculo2.push(ul[key])
            dadosMerge.push(ul[key])
          }

        }
      }
    })
  })


  //=====================================================================================================

  const pegaDuplicateIdVinculo = monitoramento2.map(e => e['idVinculo'])
    .map((e, i, ar) => ar.indexOf(e) !== i && i)
    .filter(obj => monitoramento2[obj])
    .map(e => monitoramento2[e]["idVinculo"])

  const pegaElementoDuplicate = monitoramento2.filter(obj => pegaDuplicateIdVinculo.includes(obj.idVinculo));

  const pegaBloqui = pegaElementoDuplicate.slice(0, 2)

  const organizaData = pegaElementoDuplicate.sort((a, b) => {
    return new Date(b.dataMonitoramento) - new Date(a.dataMonitoramento)
  }).slice(0, 2)


  const unico = monitoramento2.map(e => e['idVinculo'])
    .map((e, i, final) => final.indexOf(e) === i && i)
    .filter(obj => monitoramento2[obj])
    .map(e => monitoramento2[e])


  const unico2 = unico.filter(obj => !pegaDuplicateIdVinculo.includes(obj.idVinculo))
  unico2.push(organizaData[0])
  unico2.push(organizaData[1])

  /*unico2.sort((a, b) => {
    return a.idVinculo - b.idVinculo
  })*/


  unico2.map((el, index, ar) => {


    monitoramentoUp.push(el)
    dadosMerge.push(el)
  })



  //==================================================================================================

  const tabelaPropriedade = propriedade2.map((el) => {
    return (
      <tr>
        <td>{el.nomePropriedade}</td>
        <td>{el.numeroCadastroRural}</td>
      </tr>
    )
  })

  const tabelaProdutor = produtor2.map((el) => {
    return (
      <tr>
        <td>{el.nomeProdutor}</td>
        <td>{el.cpfProdutor}</td>
      </tr>
    )
  })



  const tabelaMonitoramento = monitoramentoUp.map((el) => {


    return (
      <tr>
        <td>{el.dataMonitoramento}</td>
        <td>{el.analista}</td>
        <td>{el.resultado}</td>
      </tr>
    )
  })




  return (
    <>
      <Head>
        <title>nicePlanet</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />

      </Head>
      <ContextOrder.Provider value={
        {
          estado: estadoModal,
          ids: ids,
          monitoramentoUp: monitoramentoUp,
          dadosMerge: dadosMerge,
          idHistory: idsHist,
          estadoHisto: estadoHistory,
          idsBloquiados: pegaDuplicateIdVinculo,
          monitoramento2: monitoramento2
        }
      }>


        <div className={styles.ordem}>
          <Modal setEstadoModal={setEstadoModal} setBotao={setBotao} botoesCompras={botoesCompras}/>
          <ModalHistorico setEstadoHistory={setEstadoHistory} />
          <div className={styles.tabelas}>
            <table>

              <thead>
                <tr>
                  <th colSpan="2">propriedade</th>

                </tr>
                <tr>
                  <th>nome propriedade</th>
                  <th>numero cadastro rural</th>

                </tr>
              </thead>
              <tbody>
                {tabelaPropriedade}


              </tbody>
            </table>



            <div>
              <table className='testando'>

                <thead>
                  <tr>
                    <th colSpan="2">produtor</th>

                  </tr>
                  <tr>
                    <th>nome produtor</th>
                    <th>numero cpf produtor</th>

                  </tr>
                </thead>
                <tbody>
                  {tabelaProdutor}


                </tbody>
              </table>
            </div>

            <div>
              <table className='testando'>

                <thead>
                  <tr>
                    <th colSpan="3">monitoramento</th>

                  </tr>
                  <tr>
                    <th>data monitoramento</th>
                    <th>analista</th>
                    <th>resultado</th>

                  </tr>
                </thead>
                <tbody>

                  {tabelaMonitoramento}



                </tbody>

              </table>


            </div>
            <div className={styles.buttonContent}>

              <table>
                <thead>
                  <tr>
                    <th className={styles.detail}>obter detalhes</th>

                  </tr>

                </thead>
                <tbody>
                  {monitoramentoUp.map((el) => {

                    return (
                      <tr>
                        <td>
                          <Button
                            idVinculo={el.idVinculo}
                            idPropriedade={el.idPropriedade}
                            idProdutor={el.idProdutor}
                            setEstadoModal={setEstadoModal}
                            setIds={setIds} />
                        </td>
                      </tr>
                    )

                  })}

                </tbody>
              </table>


            </div>
            <div className={styles.buttonContent}>

              <table>
                <thead>
                  <tr>
                    <th className={styles.detail}>verificar historico</th>

                  </tr>

                </thead>
                <tbody>
                  {monitoramentoUp.map((el) => {
                    return (
                      <tr>
                        <td>
                          <ButtonHist ids={el.idVinculo} setIdsHist={setIdsHist} setEstadoHistory={setEstadoHistory} />
                        </td>
                      </tr>

                    )
                  })}

                </tbody>
              </table>

            </div>

            <div className={styles.buttonContent}>

              <table>
                <thead>
                  <tr>
                    <th className={styles.detail}>status Compras</th>

                  </tr>

                </thead>
                <tbody>
                  {botoesCompras.map((el) => {
                    return (
                      <tr>
                        <td>
                          <button style={{backgroundColor:el.estilo}}>{el.status}</button>
                        </td>
                      </tr>

                    )
                  })}

                </tbody>
              </table>

            </div>


          </div>
        </div>
      </ContextOrder.Provider>
    </>
  )
}
